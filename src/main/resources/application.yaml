spring:
  main:
    banner-mode: "off"

  datasource:
    url: jdbc:h2:mem:hieroglyphsdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    # mot de passe passé en paramètre lors exécution 
    password: ${my.password.db}
    driverClassName: org.h2.Driver
    hikari:
      minimum-idle: 5
      maximum-pool-size: 10
      auto-commit: true
      pool-name: HikariPool-1
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  h2:
    # http://localhost:8080/h2-console
    console:
      enabled: true
      path: /h2-console
      settings:
        trace: false
        # autoriser les remote connections => utile dans contexte dev & testing
        web-allow-others: true 
       
  jpa:
    generate-ddl: false
    hibernate:
      ddl-auto: create-drop
    show-sql: false

    # création schéma par hibernate avant injection data.sql
    defer-datasource-initialization: true

    open-in-view: false

  sql:
    init:
      mode: always  # Toujours initialiser la base de données
      data-locations: classpath:data.sql

  cache:
    jcache:
      config: classpath:ehcache.xml

  rabbitmq:
    # host: localhost si spring-boot:run sinon rabbitmq (service Docker)
    host: rabbitmq
    port: 5672
    username: admin
    # mot de passe passé en paramètre lors exécution 
    password: ${my.password.broker}
    virtual-host: mspoc

# paramètres queues
mspoc1:
  rabbitmq:
    in:
      consumerQueueName: "q1"
    out:
      exchange: "q2_ex"
      routingKey: "message.q2"



    